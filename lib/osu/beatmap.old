const axios = require('axios');
const fetch = require('node-fetch');
const fs = require('fs').promises;
const { osuAPIv2, osuDiffUrl } = require('../const/url.js');
const { osuMods } = require('../const/osu.js');
const { Beatmap, Calculator } = require('rosu-pp');

async function beatmapInfo(accessToken, beatmapId) {
  const beatmapData = await axios.get(`${osuAPIv2}/beatmaps/${beatmapId}`, {
    headers: {
      'Authorization': "Bearer " + accessToken
    }
  }).then(response => {
    let data = response.data;
    return { data };
  }).catch(error => {
    // console.log(error);
    return;
  });

  return beatmapData;
}

async function beatmapUserScore(accessToken, beatmapId, userId) {
  const beatmapData = await axios.get(`${osuAPIv2}/beatmaps/${beatmapId}/scores/users/${userId}`, {
    headers: {
      'Authorization': "Bearer " + accessToken
    }
  }).then(response => {
    let data = response.data;
    return { data };
  }).catch(error => {
    // console.log(error);
    return;
  });

  return beatmapData;
}

async function beatmapDownload(beatmapId) {
  const filename = `${beatmapId}.osu`;

  const response = await fetch(`${osuDiffUrl}/${beatmapId}`);
  const buffer = await response.buffer();
  await fs.writeFile(`./files/osuDifficulty/${filename}`, buffer);

  return filename;
}

async function beatmapDelete(beatmapId) {
  const filename = `${beatmapId}.osu`;

  try {
    await fs.unlink(`./files/osuDifficulty/${filename}`);
    return console.log(`Successfully deleted ${filename}`);
  } catch (e) {
    console.log(e);
  }
}

async function calculatePP(osuFile, mode) {
  let map = new Beatmap({ path: `./files/osuDifficulty/${osuFile}` });
  const allModsPP = new Map();

  osuMods.forEach(function (value, key) {
    let score = {
      mode: mode,
      mods: value,
    };

    let calc = new Calculator(score);
    let maxAttrs = calc.performance(map);

    allModsPP.set(key, Math.floor(maxAttrs.pp));
  });

  return allModsPP;
}

module.exports = { beatmapInfo, beatmapUserScore, beatmapDownload, beatmapDelete, calculatePP }