const fs = require('fs');
const { SlashCommandBuilder } = require('discord.js');
const { getCredentials } = require('../../lib/osu/osuAuth.js');
const { convertUserUrl, getUserProfile, getUserProfileLegacy, getUserTopPlay } = require('../../lib/osu/users.js');
const { textConfirmation } = require('../../lib/embeds/text-confirmation.js');
const { showUserInfo } = require('../../lib/embeds/users.js');

module.exports = {
  data: new SlashCommandBuilder()
    .setName('profile')
    .setDescription("Get user's osu! profile")
    .addStringOption(option =>
      option.setName('mode')
        .setDescription("Choose user's gamemode")
        .setRequired(true)
        .addChoices(
          { name: 'osu!standard', value: 'osu' },
          { name: 'osu!taiko', value: 'taiko' },
          { name: 'osu!catch', value: 'fruits' },
          { name: 'osu!mania', value: 'mania' },
        ))
    .addStringOption(option => option.setName('nickname')
      .setDescription('Input osu! nickname (Optional)')),
  async execute(interaction) {
    // Send a deferred reply
    await interaction.deferReply();

    // Variables
    let showEmbed;
    let convertedUrl;

    // Function to get profile and create embed
    async function getProfile(osuToken, convertedUrl, userMode) {
      try {
        const userData = await getUserProfile(osuToken, convertedUrl, userMode);
        const userTopPlay = await getUserTopPlay(osuToken, convertedUrl, userMode);
        const userProfileLegacy = await getUserProfileLegacy(convertedUrl, userMode);
        showEmbed = await showUserInfo(userData.data, userMode, userTopPlay, userProfileLegacy);
      } catch (error) {
        showEmbed = await textConfirmation("Cannot find matching user.", "danger");
      }
    }

    // Get credentials and options from the interaction
    const osuToken = await getCredentials();
    let nickname = interaction.options.getString('nickname');
    const userMode = interaction.options.getString('mode');

    // If nickname is provided
    if (nickname) {
      convertedUrl = await convertUserUrl(nickname);
      await getProfile(osuToken, convertedUrl, userMode);
    } else {
      // Get Discord user ID and read osuNickname.json
      const discordUserId = interaction.user.id;
      const filePath = 'lib/localdb/osuNickname.json';

      // Read the JSON file
      const jsonData = JSON.parse(fs.readFileSync(filePath));
      const isUserRegistered = jsonData.hasOwnProperty(discordUserId);

      // Check if the user ID exists in the JSON file
      if (isUserRegistered) {
        nickname = jsonData[discordUserId].osuNickname;
        convertedUrl = await convertUserUrl(nickname);
        await getProfile(osuToken, convertedUrl, userMode);
      } else {
        showEmbed = await textConfirmation("You haven't set your osu! nickname. Please use /set-osu first", "danger");
      }
    }

    // Edit the deferred reply with the embed
    await interaction.editReply({ embeds: [showEmbed] });
  }
};